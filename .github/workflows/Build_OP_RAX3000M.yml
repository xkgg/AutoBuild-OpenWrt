#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: eSirPlayground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: Build_RAX3000M

# Add a button to trigger the workflow
on: 
  schedule:
    - cron: '0 4 * * *'
  repository_dispatch:
  workflow_dispatch:
      inputs:
         SSH_ACTION:
           description: 'SSHËøúÁ®ãÈÖçÁΩÆÂõ∫‰ª∂'
           required: false
           default: 'false'
           type: boolean
    

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
          set +e
          docker rmi `docker images -q`
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo rm -rf \
            /usr/share/dotnet \
            /usr/local/lib/android \
            /opt/ghc \
            /etc/mysql \
            /etc/php
          sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
          sudo apt-get update -y
          sudo apt-get full-upgrade -y
          sudo apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          
    - name: ÂêàÂπ∂Á£ÅÁõò Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024
        
    - name: Â∞ÜgithubÂ≠òÂÇ®Â∫ìÁ≠æÂá∫Âà∞ËøêË°åÂô®
      uses: actions/checkout@master
      
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/openwrt/openwrt
        REPO_BRANCH: v24.10.2
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        #echo "src-git ssrp https://github.com/fw876/helloworld.git" >> ./feeds.conf.default
        echo 'src-git nas https://github.com/linkease/nas-packages.git;master' >> feeds.conf.default
        echo 'src-git nas_luci https://github.com/linkease/nas-packages-luci.git;main' >> feeds.conf.default
        echo 'src-git kenzo https://github.com/kenzok8/openwrt-packages' >> feeds.conf.default
        echo 'src-git small https://github.com/kenzok8/small' >> feeds.conf.default
        
    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a && rm -rf feeds/luci/applications/luci-app-mosdns
        rm -rf feeds/packages/net/{alist,adguardhome,mosdns,xray*,v2ray*,v2ray*,sing*,smartdns}
        rm -rf feeds/packages/utils/v2dat
        rm -rf feeds/packages/lang/golang
        git clone https://github.com/kenzok8/golang feeds/packages/lang/golang
        ./scripts/feeds install -a
        
        rm -rf feeds/packages/net/{alist,adguardhome,mosdns,xray*,v2ray*,v2ray*,sing*,smartdns}
        rm -rf feeds/packages/utils/v2dat
        rm -rf feeds/packages/lang/golang
        
    #- name: Import external feeds - passwall
    #  working-directory: ./openwrt
    #  run: |
    #    git clone https://github.com/xiaorouji/openwrt-passwall.git package/lienol
    #    git clone "your_github_link" package/"your_folder_name"      

    #- name: Import external feeds - JerryKuKu Argon
    #  working-directory: ./openwrt
    #  run: |
    #    git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon-jerrykuku

    - name: Configuration Customization - Build_NanoPi_R2S
      env:
        CONFIG_FILE: 'rax3000openwrt.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig
        
    - name: SSHËøúÁ®ãËøûÊé•Ôºàmake menuconfigÔºâ
      if: inputs.SSH_ACTION == 'true'
      uses: danshui-git/debugger-action@main
      
    - name: Ëá™ÂÆö‰πâËÆæÁΩÆÁ±ª
      run: |
        #Âà†Èô§ÊóßÁâàopenclash
        ls
        rm -rf openwrt/package/feeds/luci/luci-app-openclash

        ls
        chmod +x ./rax3000m/customize.sh && ./rax3000m/customize.sh
        chmod +x $GITHUB_WORKSPACE/patches/*.sh
        chmod +x $GITHUB_WORKSPACE/rax3000m/*.sh
        cd openwrt/package/feeds/luci
        #ÊâßË°åËá™ÂÆö‰πâÊèí‰ª∂
        $GITHUB_WORKSPACE/patches/Plugins.sh
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j $(($(nproc)+1)) || make -j$(nproc) V=s || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        #Ëé∑ÂèñÂõ∫‰ª∂Êû∂ÊûÑ
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
#    - name: Package Firmware
#      run: |
#        cd ./openwrt
#        rm -rf $(find ./bin/targets/ -iregex ".*\(json\|manifest\|buildinfo\|sha256sums\|packages\)$")


        
    - name : Upload artifact Âõ∫‰ª∂‰∏ä‰º†
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt_Âõ∫‰ª∂
        path: openwrt/bin/targets

        #ËΩØ‰ª∂ÂåÖÂàÜÁ±ª
    - name: Package Firmware 
      run: |
          #Âú®openwrtÁõÆÂΩï‰∏ãÂàõÂª∫ÁõÆÂΩï‰∏∫uploadÁõÆÂΩïÂêç
          cd ./openwrt && mkdir ./upload

          rm -rf $(find ./bin/targets/ -iregex ".*\(json\|manifest\|buildinfo\|sha256sums\|packages\)$")
          cp -rf $(find ./bin/targets/ -type f -iname "*.*") ./upload/
          cp -rf ./.config ./upload/Config_"Rax3000"_"openwrtÊ∫êÁ†Å"_"$FILE_DATE".txt
          cd ./bin/targets/*/*
          echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
          cd ./upload

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
          cd
          cd openwrt/bin/targets/*/*
          rm -rf packages
          rm -rf *.buildinfo
          rm -rf sha256sums
          rm -rf *.manifest
          rm -rf *rootfs.img.gz
          rm -rf *.json
          rm -rf *.qcow2
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: ${{ steps.organize.outputs.status == 'success' && !cancelled() }}
      with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      run: |
          echo "release_tag=$(date +"%Y.%m.%d_%H.%M.%S-Rax3000m")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "### üìí Âõ∫‰ª∂‰ø°ÊÅØ" >> release.txt
          echo "Rax3000M Ëá™Áî®Á≤æÁÆÄ openwrtÔºö" >> release.txt
          echo "- üíª Âπ≥Âè∞Êû∂ÊûÑ: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}" >> release.txt
          echo "- üöÄ ÂÜÖÊ†∏ÁâàÊú¨: ${{ env.KERNEL }}" >> release.txt
          echo "- üåê ÈªòËÆ§Âú∞ÂùÄ: 192.168.10.1" >> release.txt
          echo "- üë§ Ë¥¶Âè∑Ôºöroot" >> release.txt
          echo "- üîë ÈªòËÆ§ÂØÜÁ†Å: Á©∫ ÊàñËÄÖ password" >> release.txt
          
          echo "ÁºñËØëÁöÑÊ∫êÁ†ÅÂèñËá™Ôºöhttps://github.com/openwrt/openwrt" >> release.txt
          echo "ÈõÜÊàêÊèí‰ª∂Ôºö1„ÄÅopenclash[ÈõÜÊàêMetaÂÜÖÊ†∏] 2„ÄÅTTYD ÁªàÁ´Ø 3„ÄÅÁΩëÁªúÂî§ÈÜí 4„ÄÅfrpÂÆ¢Êà∑Á´Ø 5„ÄÅfrpÊúçÂä°Á´Ø
          6„ÄÅalist 7„ÄÅUPNP" >> release.txt
          echo "ÈªòËÆ§‰∏ªÈ¢òÔºöArgon" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
          
          #‰∏ä‰º†Âõ∫‰ª∂‰ª•ÂèëÂ∏É
    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ./openwrt/upload/*.*


    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
 
    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      with:
          keep_latest: 3
          delete_tags: true
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

